---
import Layout from '../../layouts/Layout.astro';
import GlobalHeader from '../../components/GlobalHeader.astro';

// 環境変数からSSGFormのURLとreCAPTCHAのサイトキーを取得
const ssgformUrl = import.meta.env.SSGFORM_URL;
const recaptchaSiteKey = import.meta.env.PUBLIC_RECAPTCHA_SITE_KEY;
---

<Layout
  title="お問い合わせ | 株式会社Lumilinks"
  description="Lumilinksのお問い合わせフォームです。お仕事のご依頼やご相談など、お気軽にお問い合わせください。"
>
  <section class="pt-16">
    <GlobalHeader />
    <div class="grid grid-cols-1 gap-4 mb-8 pt-16">
      <h1 class="text-4xl sm:text-5xl font-normal mb-8">お問い合わせ</h1>
      <p class="mb-4">
        以下のフォームからお気軽にお問い合わせください。
        <a
          href="https://x.com/kgsi"
          target="_blank"
          rel="noopener"
          class="underline hover:no-underline">X（旧Twitter）</a
        >や<a
          href="https://www.facebook.com/shinichi.kogiso/"
          target="_blank"
          rel="noopener"
          class="underline hover:no-underline">Facebook</a
        >などでお問い合わせいただくことも可能です。
      </p>
    </div>

    <form
      action={ssgformUrl}
      method="post"
      class="flex flex-col gap-6 max-w-2xl"
      id="contact-form"
    >
      <div class="flex flex-col gap-2">
        <label for="name">お名前</label>
        <input
          type="text"
          id="name"
          name="お名前"
          required
          class="px-4 py-2 border border-black dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800"
        />
      </div>

      <div class="flex flex-col gap-2">
        <label for="email">メールアドレス</label>
        <input
          type="email"
          id="email"
          name="メールアドレス"
          autocomplete="email"
          required
          class="px-4 py-2 border border-black dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800"
        />
      </div>

      <div class="flex flex-col gap-2">
        <label for="subject">件名（任意）</label>
        <input
          type="text"
          id="subject"
          name="件名"
          class="px-4 py-2 border border-black dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800"
        />
      </div>

      <div class="flex flex-col gap-2">
        <label for="message">お問い合わせ内容</label>
        <textarea
          id="message"
          name="お問い合わせ内容"
          rows="6"
          required
          class="px-4 py-2 border border-black dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800"
        ></textarea>
      </div>

      <div class="flex flex-row items-center gap-4">
        <input
          type="checkbox"
          id="privacy"
          class="w-6 h-6 mb-0.5"
          name="プライバシーポリシーに同意して送信する"
          required
        />
        <label for="privacy" class="text-normal mt-0.5">
          <a href="/privacy" class="underline hover:no-underline"
            >プライバシーポリシー</a
          >に同意して送信する
        </label>
      </div>
      <input
        type="hidden"
        name="g-recaptcha-response"
        id="g-recaptcha-response"
      />

      <div class="flex items-center gap-4 mt-4">
        <button
          type="submit"
          class="px-8 py-2 bg-black text-white dark:text-black dark:bg-white hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          id="submit-button"
        >
          送信
        </button>
        <div id="submit-status">送信中...</div>
      </div>
    </form>
  </section>
</Layout>

<script define:vars={{ recaptchaSiteKey }}>
  // reCAPTCHAの遅延読み込み
  const loadRecaptcha = () => {
    return new Promise((resolve) => {
      const script = document.createElement('script');
      script.src = `https://www.google.com/recaptcha/api.js?render=${recaptchaSiteKey}`;
      script.onload = () => {
        // grecaptchaオブジェクトが利用可能になるまで待機
        const waitForGrecaptcha = setInterval(() => {
          if (window.grecaptcha && window.grecaptcha.execute) {
            clearInterval(waitForGrecaptcha);
            resolve();
          }
        }, 100);
      };
      document.body.appendChild(script);
    });
  };

  const form = document.getElementById('contact-form');
  const submitButton = document.getElementById('submit-button');
  const submitStatus = document.getElementById('submit-status');

  let recaptchaLoaded = false;

  const handleSubmit = async (e) => {
    e.preventDefault();
    submitButton.disabled = true;
    submitStatus.classList.remove('hidden');

    try {
      if (!recaptchaLoaded) {
        await loadRecaptcha();
        recaptchaLoaded = true;
      }

      const token = await window.grecaptcha.execute(recaptchaSiteKey, {
        action: 'submit',
      });
      document.getElementById('g-recaptcha-response').value = token;
      form.submit();
    } catch (error) {
      console.error('reCAPTCHA error:', error);
      alert('エラーが発生しました。しばらく時間をおいて再度お試しください。');
      submitButton.disabled = false;
      submitStatus.classList.add('hidden');
    }
  };

  form.addEventListener('submit', handleSubmit);
</script>
